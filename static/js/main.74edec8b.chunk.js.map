{"version":3,"sources":["modules/Header.js","modules/Player.js","modules/Board.js","modules/Result.js","modules/Button.js","App.js","serviceWorker.js","index.js"],"names":["Lheader","styled","div","HeaderMain","h3","Header","props","name","Lplayer","ActivePlayerMaru","PlayerMaru","ActivePlayerBatsu","PlayerBatsu","Player","check","xIsNext","maruPlayer","batsuPlayer","Lboard","Blank","Table","table","Cell","td","Board","cell","i","onClick","handleClick","squares","border","Lresult","ResultMain","Result","status","condition","activePlayer","exceed","count","Lbutton","ButtonMain","button","Button","Main","App","state","Array","fill","bind","handleResetClick","this","slice","checkedPlayer","setState","checkedWinner","s","x","lines","length","a","b","c","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.74edec8b.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\n//style\nconst Lheader = styled.div`\n  text-align: center;\n`;\nconst HeaderMain = styled.h3`\n  color: blue;\n`;\n\n\nfunction Header(props) {\n    return (\n        <Lheader>\n            <HeaderMain>{props.name}</HeaderMain>\n        </Lheader>\n    );\n};\n\n// class Header extends React.Component {\n//     constructor(props) {\n//         super(props);\n//     }\n//     render() {\n//         return (\n//             <div className=\"l-header\">\n//                 <h3 className=\"header\">{this.props.name}</h3>\n//             </div>\n//         );\n//     };\n// }\n\nexport default Header;\n","import React from 'react';\nimport styled from 'styled-components';\n\n\n//style\nconst Lplayer = styled.div`\n    display: flex;\n    justify-content: center;\n`;\n//○プレイヤーのデザイン\nconst ActivePlayerMaru = styled.div`\n    padding: 16px;\n    border-bottom: solid 2px;\n`;\nconst PlayerMaru = styled.div`\n    padding: 16px;\n`;\n//×プレイヤーのデザイン\nconst ActivePlayerBatsu = styled.div`\n    padding: 16px;\n    border-bottom: solid 2px;\n`;\nconst PlayerBatsu = styled.div`\n    padding: 16px;\n`;\n\nfunction Player(props){\n        \n    const check = props.xIsNext\n    let maruPlayer = <ActivePlayerMaru>○</ActivePlayerMaru>\n    let batsuPlayer = <PlayerBatsu>×</PlayerBatsu>\n\n        if (!check) {\n            maruPlayer = <PlayerMaru>○</PlayerMaru>\n            batsuPlayer = <ActivePlayerBatsu>×</ActivePlayerBatsu>\n        }\n        return (\n            <Lplayer>\n                {maruPlayer}\n                {batsuPlayer}\n            </Lplayer>\n        );\n    };\n\n// class Player extends React.Component {\n//     constructor(props) {\n//         super(props);\n//     }\n//     render() {\n//         const check = this.props.xIsNext\n//         let maruPlayer = <div className=\"player-maru player-common active\">○</div>\n//         let batsuPlayer = <div className=\"player-batsu player-common\">×</div>\n\n//         if (!check) {\n//             maruPlayer = <div className=\"player-maru player-common\">○</div>\n//             batsuPlayer = <div className=\"player-batsu player-common active\">×</div>\n//         }\n//         return (\n//             <div className=\"l-player\">\n//                 {maruPlayer}\n//                 {batsuPlayer}\n//             </div>\n//         );\n//     };\n// }\n\n\nexport default Player;","import React from 'react';\nimport styled from 'styled-components';\n\n\n//style\nconst Lboard = styled.div`\n`;\nconst Blank = styled.div`\n    padding: 20px;\n`;\nconst Table = styled.table`\n    border-collapse: collapse;\n    margin: 0 auto;\n`;\nconst Cell = styled.td`\n    border: solid 2px black;\n    width: 50px;\n    height: 50px;\n    cursor: pointer;\n    text-align: center;\n    font-size: 25px;    \n`;\n\n\nfunction Board (props) {\n    const cell =(i)=> <Cell onClick={() => props.handleClick(i)}>{props.squares[i]}</Cell>\n    const border = (\n        <Table>\n            <tbody>\n                <tr>\n                    {cell(0)}\n                    {cell(1)}\n                    {cell(2)}\n                </tr>\n                <tr>\n                    {cell(3)}\n                    {cell(4)}\n                    {cell(5)}\n                </tr>\n                <tr>\n                    {cell(6)}\n                    {cell(7)}\n                    {cell(8)}\n                </tr>\n            </tbody>\n        </Table>\n    );\n    return (\n        <Blank>\n            <Lboard>\n                {border}\n            </Lboard>\n        </Blank>\n    );\n};\n\n\n// class Board extends React.Component {\n//     constructor(props) {\n//         super(props);\n//     }\n//     render() {\n//         const cell = (i) => <td className=\"cell\" onClick={() => this.props.handleClick(i)}>{this.props.squares[i]}</td>\n//         const border = (\n//             <table>\n//                 <tbody>\n//                     <tr>\n//                         {cell(0)}\n//                         {cell(1)}\n//                         {cell(2)}\n//                     </tr>\n//                     <tr>\n//                         {cell(3)}\n//                         {cell(4)}\n//                         {cell(5)}\n//                     </tr>\n//                     <tr>\n//                         {cell(6)}\n//                         {cell(7)}\n//                         {cell(8)}\n//                     </tr>\n//                 </tbody>\n//             </table>\n//         );\n//         return (\n//             <div className=\"blank\">\n//                 <div className=\"l-board\">\n//                     {border}\n//                 </div>\n//             </div>\n//         );\n//     };\n// }\n\nexport default Board;","import React from 'react';\nimport styled from 'styled-components';\n\n\n//style\nconst Lresult = styled.div`\n    text-align: center;\n    margin-bottom: 10px;\n`;\nconst ResultMain = styled.div`\n`; \n\nfunction Result(props) {\n    const condition = {\n        playing: \"processing\",\n        win: \"win!\",\n        draw: \"draw\"\n    }\n    const activePlayer = {\n        maru: '○',\n        batsu: '×'\n    }\n\n    let status;\n    if(props.exceed){\n            status = condition.playing\n        if (props.count === 9){\n            status = condition.draw\n        }\n    }else{\n        if (props.xIsNext){\n            status = activePlayer.batsu+condition.win\n        }else{\n            status = activePlayer.maru + condition.win\n        } \n    }\n    return (\n        <Lresult>\n            <ResultMain>\n                {status}\n            </ResultMain>\n        </Lresult>\n    );\n};\n\n\n// class Result extends React.Component {\n//     constructor(props) {\n//         super(props);\n//     }\n//     render() {\n//         const condition = {\n//             playing: \"processing\",\n//             win: \"win!\",\n//             draw: \"draw\"\n//         }\n//         const activePlayer = {\n//             maru: '○',\n//             batsu: '×'\n//         }\n//         let status;\n\n//         if (this.props.exceed) {\n//             status = condition.playing\n//             if (this.props.count === 9) {\n//                 status = condition.draw\n//             }\n//         } else {\n//             if (this.props.xIsNext) {\n//                 status = activePlayer.batsu + condition.win\n//             } else {\n//                 status = activePlayer.maru + condition.win\n//             }\n//         }\n\n//         return (\n//             <div className=\"l-result\">\n//                 <div className=\"result\">\n//                     {status}\n//                 </div>\n//             </div>\n//         );\n//     };\n// }\n\nexport default Result;","import React from 'react';\nimport styled from 'styled-components';\n\nconst Lbutton = styled.div`\n  text-align: center;\n`;\n\nconst ButtonMain = styled.button`\n    display: inline-block;\n    font-size: 1rem;\n    font-weight: bold;\n    background-color: white;\n    border: 2px solid black;\n    text-align: center;\n    border-radius: 4px;\n    padding: 1px 15px;\n    cursor: pointer;\n    &: hover{\n        background-color: black;\n        color: white;\n    }\n`;\n\nfunction Button(props){\n    return (\n        <Lbutton>\n            <ButtonMain onClick={props.handleClick} >\n                restart\n            </ButtonMain>\n        </Lbutton>\n    );\n};\n\n// class Button extends React.Component {\n//     constructor(props) {\n//         super(props);\n//     }\n//     render() {\n//         return (\n//             <div className=\"l-button\">\n//                 <a className=\"button\" onClick={this.props.handleClick} >\n//                     restart\n//          </a>\n//             </div>\n//         );\n//     };\n// }\n\nexport default Button;\n","import React, { Component } from 'react';\n\n//components\nimport Header from './modules/Header';\nimport Player from './modules/Player';\nimport Board from './modules/Board';\nimport Result from './modules/Result';\nimport Button from './modules/Button';\n\n//style\nimport styled from 'styled-components';\n// import logo from './logo.svg';\n// import './App.css';\n\n\n//定数\nconst activePlayer = {\n  maru: '○',\n  batsu: '×'\n}\n\n//style\nconst Main = styled.div`\n  width: 100%;\n  max-width: 350px;\n  height: 250px;\n  margin: 200px auto;\n`;\n\n\n//comppnent\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state={\n      squares: Array(9).fill(null), //盤面の状況\n      xIsNext: true,  //trueの場合は○,falseは×\n      count: 0, //ターン数。引き分け判定のため\n      exceed: true //ゲームの終了判定。falseでゲーム終了。\n    };\n    //クリックしたら、セルに○、×を入れる。=>stateを更新する。=>勝敗判定をする。=>終了判定をする。\n    this.handleClick = this.handleClick.bind(this);\n    //リセットする。\n    this.handleResetClick = this.handleResetClick.bind(this);\n  };\n\n  handleClick(i){\n    const squares = this.state.squares.slice();\n    const xIsNext = this.state.xIsNext\n    const exceed = this.state.exceed\n    const count = this.state.count\n\n    //プレー続行判定、同じ場所か判定\n    if (!exceed || squares[i]) {\n      return\n    }\n\n    //プレイヤー判定し、squares[i]に入れる。\n    this.checkedPlayer(squares,xIsNext,i)\n\n    //state変更\n    this.setState({\n      squares: squares,\n      xIsNext: !xIsNext,\n      count: count+1\n    });\n    \n    // 勝敗判定. 'o'or'x'かnull\n    const winner =\n    this.checkedWinner(squares)\n\n    //nullでなければ勝負終了。\n    if (winner) {\n      this.setState({\n        exceed: false\n      });\n    }\n  }\n\n  checkedPlayer(s,x,i){\n    return s[i] = (x === true) ? activePlayer.maru : activePlayer.batsu\n  }\n\n\n  checkedWinner(s) {\n    const lines =[\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n    for(let i =0; i<lines.length; i++){\n      const [a,b,c]=lines[i];\n      if (s[a] && s[a] ===s[b]&&s[a]===s[c]){\n        return s[a]\n      }\n    }\n    return null\n  }\n\n  //初期化関数\n  handleResetClick() {\n    this.setState({\n      squares: Array(9).fill(null),\n      xIsNext: true,\n      count: 0,\n      exceed: true\n    });\n  }\n\n  render() {\n    return (\n      <Main>\n        <Header name=\"Tic Tac Toe\" />\n        <Player xIsNext={this.state.xIsNext} />\n        <Board squares={this.state.squares} xIsNext={this.state.xIsNext} count={this.state.count} handleClick={this.handleClick}/>\n        <Result exceed={this.state.exceed} xIsNext={this.state.xIsNext} count={this.state.count}/>\n        <Button handleClick={this.handleResetClick} />\n      </Main>\n    );\n  };\n};\n\nexport default App;\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}